# 
msgid ""
msgstr ""
"Project-Id-Version: jvrc software 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-31 17:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../advanced/index.rst:2
msgid "Advanced simulations"
msgstr "シミュレーションの応用"

#: ../../advanced/sensors.rst:2
msgid "Connecting sensors"
msgstr "センサの接続"

#: ../../advanced/sensors.rst:5
msgid "This section explains how to read sensors on JVRC-1 model."
msgstr "ここではJVRCモデルに搭載された各種センサのデータを取得できるようにします。"

#: ../../advanced/sensors.rst:8
msgid "Open a project file"
msgstr "プロジェクトを開く"

#: ../../advanced/sensors.rst:14
msgid "Sensors defined in JVRC-1 model"
msgstr "JVRC モデルのセンサ"

#: ../../advanced/sensors.rst:42
msgid "We can find force sensors, named rfsensor, lfsensor and so on. ::"
msgstr "他にも、力センサ rfsensor, lfsensorが搭載されていることが分かります。 ::"

#: ../../advanced/sensors.rst:52
msgid ""
"We can find cameras named rcamera and lcamera, and a range sensor named "
"ranger. ::"
msgstr "カメラ rcamera, lcamera、距離センサ ranger も確認することができます。 ::"

#: ../../advanced/sensors.rst:105
msgid ""
"You can find data types for each sensor in the following webpage. But the "
"webpage is rather old and some of data types are obsolete."
msgstr "各センサの仕様について解説します。 おおまかな仕様はこちらで確認することができますが、記述がかなり古く不正確です。"

#: ../../advanced/sensors.rst:107 ../../advanced/sensors.rst:444
msgid "http://www.openrtp.jp/openhrp3/jp/controller_bridge.html"
msgstr ""

#: ../../advanced/sensors.rst:115
msgid "Data type of the camera image is Img::TimedCameraImage."
msgstr "カメラの値はImg::TimedCameraImage型になります。"

#: ../../advanced/sensors.rst:117
msgid ""
"https://github.com/s-nakaoka/choreonoid/blob/master/src/OpenRTMPlugin/corba/CameraImage.idl"
msgstr ""

#: ../../advanced/sensors.rst:119
msgid "Img::TimedCameraImage is defined as follows."
msgstr "Img::TimedCameraImageの型の定義は以下のようになっています。"

#: ../../advanced/sensors.rst:152
msgid ""
"data.image.raw_date contains width x height pixels. Definition of a pixel "
"depends on the pixel format specified by format field. Cameras on JVRC-1 "
"have 640 pixel width and 480 pixel height. Therefore raw_data contains data "
"for 640x480 pixels."
msgstr ""
"width x heightの各ピクセルの色情報が1ピクセル当たりformatとしてdata.image.raw_date部分に格納されます。 "
"今回のカメラの場合、width = 640, height = 480と定義されているので、640x480のデータとなります。"

#: ../../advanced/sensors.rst:155
msgid "Data type of a range sensor is RTC::RangeData."
msgstr "距離センサの値はRangeData型になります。"

#: ../../advanced/sensors.rst:172
msgid ""
"Measured distances from right to left are stored in ranges. If measurement "
"of distance fails 0 is stored."
msgstr ""
"シーケンスに計測方向に向かって右からスキャンした距離データが格納されています。 "
"距離の値は何かに干渉が発生する限り出力されますが、干渉がない場合は0になります。"

#: ../../advanced/sensors.rst:176
msgid "Source code of a controller"
msgstr "コントローラのソースコード"

#: ../../advanced/sensors.rst:178
msgid ""
"A header file of the controller is as follows. This file was created by "
"modifying SR1WalkControllerRTC.h which is included in Choreonoid."
msgstr ""
"コントローラのヘッダのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.hを基にしています。"

#: ../../advanced/sensors.rst:239
msgid ""
"Source codes of the controller are as follows. This file was created by "
"modifying SR1WalkConrollerRTC.cpp which is included in Choreonoid."
msgstr ""
"コントローラのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.cppを基にしています。 "

#: ../../advanced/sensors.rst:408
msgid ""
"Contents are almost same with the source in the previous tutorial. Input "
"data ports for sensors are just added. Notice that data types are different "
"depending on sensor types."
msgstr ""
"行っている処理については、「RTコンポーネントのコントローラの接続」とほとんど同じで、センサが増えただけです。 "
"ただし、それぞれのセンサの型は異なるので注意してください。"

#: ../../advanced/sensors.rst:413
msgid "A configuration file for RTC"
msgstr "RTCの設定ファイル"

#: ../../advanced/sensors.rst:415
msgid ""
"In the previous tutorials, data ports are connected automatically "
"Choreonoid. But this function only works with simple port configurations."
msgstr ""
"これまではChoreonoidの自動設定の機能を用いてRTCのポートを生成していました。 "
"しかし、これはサンプル実行用のもので、単純なRTCのポート定義にしか使えません。"

#: ../../advanced/sensors.rst:436
msgid ""
"in-port means definition of an input data port. No input port is defined in "
"this example."
msgstr "これがin-portになると入力ポートの定義となります。今回はトルクの計算がないため使用していません。"

#: ../../advanced/sensors.rst:438
msgid ""
"connection defines a connection between data ports. For instance, "
"q:RobotSensorsControllerRTC0:q means to connect this RT component and "
"RobotSensorsControllerRTC0."
msgstr ""
"connectionとはRTCのポート接続の設定となります。例えば、「q:RobotSensorsControllerRTC0:q」とはこのRTCのポートqとRobotSensorsControllerRTC0コントローラとの接続設定になります。"

#: ../../advanced/sensors.rst:440
msgid ""
"This configuration file is used to create data ports of BodyRTC. Data ports "
"of usual RT components are statically defined in their source codes."
msgstr ""
"ちなみに、コントローラのポート設定に関しては、コントローラのソースコード中で動的に生成と設定がされるので設定ファイルを用いる必要はありません。"

#: ../../advanced/sensors.rst:442
msgid ""
"Since this configuration file format is similar with OpenHRP, you can refer "
"the following webpage. But please note that the format differs slightly."
msgstr "この設定ファイルの仕様は OpenHRP3 をベースにしているので以下を参考にしてください。 ただし、下記の資料は記述が古いです。"

#: ../../advanced/sensors.rst:447
msgid "Build the controller"
msgstr "コントローラのビルド"

#: ../../advanced/sensors.rst:457
msgid "And then, execute the following command."
msgstr "その後、次のコマンドを実行します。"

#: ../../advanced/sensors.rst:463
msgid ""
"Configuration files for RTC must be placed in shared data directory of "
"Choreonoid(/usr/lib/choreonoid-1.5/rtc). \"make install\" puts configuration"
" file in the directory."
msgstr ""
"ChoreonoidではRTCの設定ファイルはChoreonoidのインストール先の共有ディレクトリ(/usr/lib/choreonoid-1.5/rtc)に配置しなければなりません。\"make"
" install\"ではこの処理を自動的に行ってくれます。"

#: ../../advanced/sensors.rst:466
msgid "Setup the controller"
msgstr "コントローラの設定"

#: ../../advanced/sensors.rst:473
msgid "Enable cameras and range sensors"
msgstr "カメラ、距離センサの有効化"

#: ../../advanced/sensors.rst:475
msgid ""
"To enable cameras and range sensors in simulation, do the following "
"settings."
msgstr "シミュレーションにおいてカメラや距離センサを有効にするため、以下の作業を行います。"

#: ../../advanced/sensors.rst:477
msgid ""
"Select AISTSimulator in the item view and create a GLVisionSensorSimulator "
"item and name it GLVisionSimulator."
msgstr ""
"アイテムビューで「AISTSimulator」を選択し、「新規」より「GL視覚センサシミュレータ」を選択し、「GLVisionSimulator」という名前で追加します。"

#: ../../advanced/sensors.rst:481
msgid "Select GLVisionSimulator item and set its properties as follows."
msgstr "「GLVisionSimulator」を選択し、プロパティを以下のように変更します。"

#: ../../advanced/sensors.rst:483
msgid "Target body to JVRC."
msgstr "「対象ボディ」を「JVRC」"

#: ../../advanced/sensors.rst:485
msgid "Target sensor to ranger."
msgstr "「対象センサ」を「ranger」"

#: ../../advanced/sensors.rst:490
msgid "Run simulation"
msgstr "シミュレーションを実行する"

#: ../../advanced/sensors.rst:500
msgid "A sample project used in this tutorial"
msgstr "サンプルプロジェクトについて"

#: ../../advanced/sensors_control.rst:2
msgid "センサによる制御"
msgstr ""

#: ../../advanced/sensors_control.rst:5
msgid ""
"「センサの接続」では、JVRC モデルに搭載されているセンサの情報をコントローラで取得できることが分かりました。 "
"ここではJVRCモデルのセンサ情報を用いて、ロボットがセンサに反応するように制御を行います。"
msgstr ""

#: ../../advanced/index.rst:4
msgid ""
"This chapter explains how to run advanced simulations such as utilization of"
" range sensors using a JVRC-1 model as an example."
msgstr "この章ではJVRCモデルファイルを用いた応用的なシミュレーションの例について解説します。"

#: ../../advanced/sensors.rst:16
msgid ""
"You can find sensors defined in the JVRC-1 model by opening "
"samples/tutorials/JVRC-1/main.wrl with a text editor. For example, you can "
"find an accelerometer and a gyrometer as follows."
msgstr ""
"JVRC-1 "
"モデルに搭載されているセンサは、テキストエディタで「samples/tutorials/JVRC-1/main.wrl」ファイルを開くと確認することができます。"
" モデルファイルを開くと次のように記述されており、加速度センサ gsensor とジャイロセンサ gyrometer が搭載されていることがわかります。"

#: ../../advanced/sensors.rst:109
msgid ""
"Data type for an accelerometer is TimedDoubleSeq and its length is 3. It "
"contains accelerations in x,y and z directions."
msgstr "加速度センサの値は要素数3のTimedDoubleSeq型になります。それぞれの方向の並進加速度が格納されています。"

#: ../../advanced/sensors.rst:111
msgid ""
"Data type for a gyrometer is TimedDoubleSeq and its length is 3. It contains"
" angular velocities in x,y and z directions."
msgstr "ジャイロセンサの値は要素数3のTimedDoubleSeq型になります。三次元ベクトルの角速度が格納されています。"

#: ../../advanced/sensors.rst:113
msgid ""
"Data type for a force/torque sensor is TimedDoubleSeq and its length is 6. 3"
" components out of 6 are for forces in x,y and z directions and the other 3 "
"are for torques around x,y and z axes."
msgstr "力センサの値は要素数6のTimedDoubleSeq型になります。3次元ベクトルの力と3次元ベクトルのトルクが格納されています。"

#: ../../advanced/sensors.rst:410
msgid ""
"You can find both of RobotSensorsControllerRTC.h and "
"RobotSensorsControllerRTC.cpp in samples/tutorials."
msgstr ""
"これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/RobotSensorsControllerRTC.cpp」と「samples/tutorials/rtc/RobotSensorsControllerRTC.h」に保存されています。"

#: ../../advanced/sensors.rst:417
msgid ""
"Since the port configuration of RTC used in this tutorials is complex, we "
"need to create a configuration file. Please create a file that contains the "
"following lines and name it \"RobotSensorsJVRC.conf\". And put it in "
"samples/tutorials/rtc. The file will be installed with RTCs. ::"
msgstr ""
"今回のロボット用のRTCは複雑なので、設定ファイルを用いて各種ポートを定義する必要があります。次のような設定ファイルを用意し、ファイル名を「RobotSensorsJVRC.conf」とします。これを「samples/tutorials/rtc/」ディレクトリに置くとコントローラのビルド後のインストール作業においてインストールされます。"
" ::"

#: ../../advanced/sensors.rst:449
msgid ""
"Go to samples/tutorials/rtc directory and execute the following command."
msgstr ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに移動し、次のコマンドを実行します。"

#: ../../advanced/sensors.rst:455
msgid ""
"This command generates RobotSensorsControllerRTC.so in samples/tutorials/rtc"
" directory."
msgstr ""
"これにより、「samples/tutorials/rtc/」ディレクトリに「RobotSensorsControllerRTC.so」というファイルが作成されるはずです。"

#: ../../advanced/sensors.rst:10
msgid ""
"Choose \"Open...\" in \"File\" menu and select a project file for JVRC-1. "
"Its name is samples/tutorials/cnoid/sample1.cnoid."
msgstr ""
"「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
"トファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインス "
"トール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」です。"

#: ../../advanced/sensors.rst:502
msgid ""
"You can find a sample project file created by this tutorial in "
"samples/tutorials/cnoid/sample3.cnoid."
msgstr ""
"このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample4.cnoid」に保存されています。"

#: ../../advanced/sensors.rst:492
msgid ""
"Press \"Start simulation from the beginning\" button on the simulation tool "
"bar. While simulation is running, sensor outputs are displayed in the "
"terminal you launched Choreonoid. In addition to joint angles(m_angle), you "
"can see outputs from accelerometers(m_gsensor), gyrometers(m_gyrometer) and "
"other sensors."
msgstr ""
"シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
"シミュレーションを実行するとchoreonoidを実行している端末にセンサの値が出力されています。 "
"「RTコンポーネントのコントローラの接続」のときとは違い、関節角度(m_angle)だけではなく、 "
"加速度センサ(m_gsensor)、ジャイロセンサ(m_gyrometer)、……の値が表示されるはずです。"

#: ../../advanced/sensors.rst:434
msgid ""
"out-port means defintion of a output data port. Its right hand value "
"consists of two values separated by comma. The first value is name of port "
"and the second value is data type."
msgstr "out-portとは、RTCの出力ポートの定義です。「ポート名：型」の形式で定義します。"

#: ../../advanced/sensors.rst:468
msgid ""
"Select BodyRTC in the item view and set value of its property, \"Controller "
"module name\" to RobotSensorsControllerRTC. This value corresponds to the "
"filename of the RT component. Set values of properties, \"Configuration "
"mode\" and \"Configuration file name\" to \"Use Configuration File\" and "
"\"RobotSensorsJVRC.conf\" respectively."
msgstr ""
"アイテムビューで「BodyRTC」を選択し、プロパティビューの「コントローラのモジュール名」を「RobotSensorsControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
" 更に、「設定モード」を「設定ファイルを使用」にし、「設定ファイル名」を「RobotSensorsJVRC.conf」とします。"

#~ msgid ""
#~ "Select BodyRTC in the item view and set value of its property, \"controller "
#~ "module name\" to RobotSensorsControllerRTC. This value corresponds to the "
#~ "filename of the RT component. Set values of properties, \"Configuration "
#~ "mode\" and \"Configuration file name\" to \"Use Configuration File\" and "
#~ "\"RobotSensorsJVRC.conf\" respectively."
#~ msgstr ""
#~ "アイテムビューで「BodyRTC」を選択し、プロパティビューの「コントローラのモジュール名」を「RobotSensorsControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
#~ " 更に、「設定モード」を「設定ファイルを使用」にし、「設定ファイル名」を「RobotSensorsJVRC.conf」とします。"

#~ msgid "out-portとは、RTCの出力ポートの定義です。「ポート名：型」の形式で定義します。"
#~ msgstr ""

#~ msgid ""
#~ "Press \\\"Start simulation\\\" button on the simulation tool bar. While "
#~ "simulation is running, sensor outputs are displayed in the terminal you "
#~ "launched Choreonoid. In addition to joint angles(m_angle), you can see "
#~ "outputs from accelerometers(m_gsensor), gyrometers(m_gyrometer) and other "
#~ "sensors."
#~ msgstr ""

#~ msgid ""
#~ "You can find a sample project file created by this tutorial in "
#~ "samples/tutorials/cnoid/sample4.cnoid."
#~ msgstr ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample4.cnoid」に保存されています。"

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample4.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "JVRC "
#~ "モデルに搭載されているセンサは、テキストエディタでリポジトリの「model/robot/main.wrl」ファイルを開くと確認することができます。 "
#~ "モデルファイルを開くと次のように記述されており、加速度センサ gsensor とジャイロセンサ gyrometer が搭載されていることがわかります。 "
#~ "::"
#~ msgstr ""

#~ msgid "加速度センサの値は要素数3のTimedDoubleSeq型になります。それぞれの方向の関節角度の二回微分(加速度)が格納されています。"
#~ msgstr ""

#~ msgid "ジャイロセンサの値は要素数3のTimedDoubleSeq型になります。三次元ベクトルのジャイロ(角速度)が格納されています。"
#~ msgstr ""

#~ msgid "力センサの値は要素数24のTimedDoubleSeq型になります。3次元ベクトルの力と3次元ベクトルのトルクが格納されています。"
#~ msgstr ""

#~ msgid ""
#~ "これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/RobotSensorsControllerRTC.cpp」と「model/robot/RTC/RobotSensorsControllerRTC.h」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "今回のロボット用のRTCは複雑なので、設定ファイルを用いて各種ポートを定義する必要があります。次のような設定ファイルを用意し、ファイル名を「RobotSensorsJVRC.conf」とします。これを「model/robot/RTC/」ディレクトリに置くとコントローラのビルド後のインストール作業においてインストールされます。"
#~ " ::"
#~ msgstr ""

#~ msgid ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/」ディレクトリに移動し、次のコマンドを実行します。 ::"
#~ msgstr ""

#~ msgid ""
#~ "これにより、「model/robot/RTC/」ディレクトリに「RobotSensorsControllerRTC.so」というファイルが作成されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「model/robot/samples/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample4.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid "本ドキュメントではJVRCモデルファイルを用いた応用的なシミュレーションの例について解説します。"
#~ msgstr ""
