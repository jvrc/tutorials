# 
msgid ""
msgstr ""
"Project-Id-Version: jvrc software 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-31 17:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../basics/howto-exec-simulation.rst:2
msgid "Creating a simulation project"
msgstr "シミュレーションの実行"

#: ../../basics/howto-exec-simulation.rst:8
msgid "Launch Choreonoid"
msgstr "Choreonoidの実行"

#: ../../basics/howto-exec-simulation.rst:10
msgid ""
"Let's launch Choreonoid first. Type the following command in gnome-terminal."
msgstr "まずはChoreonoidを実行します。端末を開いて以下のコマンドを実行してください。"

#: ../../basics/howto-exec-simulation.rst:16
msgid "You will see a window as follows."
msgstr "以下のような画面が表示されるはずです。"

#: ../../basics/howto-exec-simulation.rst:21
msgid "Open a model file"
msgstr "モデルを開く"

#: ../../basics/howto-exec-simulation.rst:38
msgid "Add a model of the floor"
msgstr "床を追加する"

#: ../../basics/howto-exec-simulation.rst:40
msgid "To prevent the robot from falling, let's add a model of the ground."
msgstr "シミュレーションを行うために、床(地面)を追加します。"

#: ../../basics/howto-exec-simulation.rst:45
msgid "Add a simulator item"
msgstr "シミュレータアイテムを追加する"

#: ../../basics/howto-exec-simulation.rst:127 ../../basics/torque.rst:361
msgid "Run simulation"
msgstr "シミュレーションを実行する"

#: ../../basics/howto-exec-simulation.rst:133
msgid "Just after starting simulation, the robot falls down."
msgstr "シミュレーションを実行すると下の画像のようにロボットはすぐに崩れ落ちてしまうはずです。 "

#: ../../basics/howto-exec-simulation.rst:140
msgid "Save a project"
msgstr "プロジェクトの保存"

#: ../../basics/howto-exec-simulation.rst:145
msgid "A sample project used in this tutorial"
msgstr "サンプルプロジェクトについて"

#: ../../basics/index.rst:2
msgid "Basic simulations"
msgstr "シミュレーションの基本"

#: ../../basics/rt-controller.rst:2
msgid "Connecting a RT component"
msgstr "RTコンポーネントのコントローラの接続"

#: ../../basics/rt-controller.rst:8 ../../basics/torque.rst:9
msgid "Open a project file"
msgstr "プロジェクトを開く"

#: ../../basics/rt-controller.rst:13
msgid "Add a controller"
msgstr "コントローラの追加"

#: ../../basics/torque.rst:14
msgid "Source code of a controller"
msgstr "コントローラのソースコード"

#: ../../basics/torque.rst:343
msgid "Build the controller"
msgstr "コントローラのビルド"

#: ../../basics/torque.rst:2
msgid "Joint control using a RT component"
msgstr "RTコンポーネントにおけるトルク指令の入力"

#: ../../basics/torque.rst:5
msgid ""
"This section extentds the RT component developed in the previous section to "
"keep the robot standing position."
msgstr "ここでは、トルク指令を出力するようにRTコンポーネントを拡張し、ロボットが直立を 維持できるようにします。"

#: ../../basics/torque.rst:73
msgid ""
"An output data port is added to output joint torques. "
"`RTC::OutPort<RTC::TimedDoubleSeq>`  is the definition of the output port."
msgstr ""
"今回はトルクの出力をしなければならないので、出力ポートのための設定が増加しています。 "
"`RTC::OutPort<RTC::TimedDoubleSeq>` はRTCの出力ポートを表す型であり、出力ポートを操作するにはこれを利用します。"

#: ../../basics/torque.rst:250
msgid ""
"The procedure to add an output port is similar to adding an input port."
msgstr "出力ポートに関する設定は、入力ポートの場合と関数名が異なるだけでよく似ています。"

#: ../../basics/torque.rst:270
msgid "Open a configuration panel of the time bar."
msgstr "タイムバーの設定画面を開きます。"

#: ../../basics/torque.rst:278
msgid ""
"This frame rate defines how many times computation is executed. If its value"
" is 1000, computation is done every 1[ms] and if its value is 100, "
"computation is done every 10[ms]."
msgstr "このフレームレートは1秒間に何回実行するかを表しています。 これが1000で1ミリ秒の間隔となり、100で10ミリ秒間隔となります。"

#: ../../basics/torque.rst:281
msgid "Create a pose sequence item"
msgstr "ポーズ列の追加"

#: ../../basics/index.rst:4
msgid ""
"This chapter explains how to setup the simulation world and run basic "
"simulations using a JVRC-1 model as an example."
msgstr "この章ではJVRCモデルファイルを用いた基本的なシミュレーションの実行方法について解説します。"

#: ../../basics/howto-exec-simulation.rst:5
msgid "This section explains how to create and run a simple simulation."
msgstr "この節ではサンプルシミュレーションの実行方法について解説します。"

#: ../../basics/howto-exec-simulation.rst:137
msgid ""
"Because all joints are not controlled but free. We will control joints in "
"the next section to keep the standing position."
msgstr "これは全く関節の制御をしていないためです。 これからロボットを制御するプログラムを記述し、ロボットが崩れ落ちないようにしていきます。"

#: ../../basics/torque.rst:252
msgid ""
"Let's look at implementation of onActivated(). This function is called only "
"once when a RT component is activated. This function reads RobotPattern.yaml"
" in shared data directory of Choreonoid. This file contains joint angle "
"trajectories and it can be loaded by calling "
"`motion.loadStandardYAMLformat()`. onActivated() initializes other "
"variables."
msgstr ""
"onActivated() のときの処理に注目しましょう。この関数はRTCが有効化された際に一度だけ呼ばれます。 "
"ここで、Choreonoidの共有ディレクトリからRobotPattern.yamlを読み出しています。 "
"これはロボットの全関節角度の軌道を記述した動作パターンファイルです。 `motion.loadStandardYAMLformat()` "
"によりモーションデータに変換します。 onActivated()では初期値の設定も行っています。"

#: ../../basics/torque.rst:266
msgid "Create a pose sequence"
msgstr "シミュレーション用動作パターンの作成"

#: ../../basics/torque.rst:268
msgid ""
"Since a joint conrol RT component is executed at 1000[Hz], set the internal "
"framerate of Choreonoid to the same value, 1000In order to set a framerate "
"of a motion pattern to the same value with execution period of a joint "
"control RT component, set the value to 1000."
msgstr ""
"ロボットの関節の制御を行うRTコンポーネントの実行周期に合わせて、ロボットの動作パターンを生成するための設定を行います。RTコンポーネントは1[ms]周期で実行されるので、Choreonoidの内部フレームレートを1000に設定します。"

#: ../../basics/howto-exec-simulation.rst:147
msgid ""
"You can find a sample project file created by this tutorial in "
"samples/tutorials/cnoid/sample1.cnoid."
msgstr ""
"このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」に保存されています。"

#: ../../basics/rt-controller.rst:184
msgid ""
"Go to samples/tutorials/rtc directory and execute the following command."
msgstr ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに移動し、次のコマンドを実行します。"

#: ../../basics/torque.rst:256
msgid ""
"You can find both of RobotTorqueCOntrollerRTC.h and "
"RobotTorqueControllerRTC.cpp in samples/tutorials."
msgstr ""
"これらのソースコードは "
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/RobotTorqueControllerRTC.cpp」と"
" 「samples/tutorials/rtc/RobotTorqueControllerRTC.h」に保存されています。"

#: ../../basics/torque.rst:351
msgid ""
"This command generates RobotTorqueControllerRTC.so in samples/tutorials/rtc "
"directory."
msgstr ""
"これにより、「samples/tutorials/rtc/」ディレクトリに「RobotTorqueControllerRTC.so」というファイルが作成されるはずです。"

#: ../../basics/torque.rst:259
msgid "Setup of the controller"
msgstr ""

#: ../../basics/rt-controller.rst:5
msgid ""
"This section explains how to connect Choreonoid and a RT component by "
"developing an example component which read joint angles."
msgstr "ここではJVRC-1のモデルにRTコンポーネントのコントローラを接続し、ロボットの関節角度を取得できるようにします。"

#: ../../basics/torque.rst:16
msgid ""
"A header file of the controller is as follows. This file was created by "
"modifying SR1WalkControllerRTC.h which is included in Choreonoid."
msgstr ""
"コントローラのヘッダのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.hを基にしています。"

#: ../../basics/torque.rst:75
msgid ""
"Source codes of the controller are as follows. This file was created by "
"modifying SR1WalkConrollerRTC.cpp which is included in Choreonoid."
msgstr ""
"コントローラのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.cppを基にしています。 "

#: ../../basics/torque.rst:254
msgid ""
"Computation of joint torques is added to onExecute(). After reading joint "
"angles, joint torques are computed and stored to m_torque.data[i]. In this "
"tutorial, joint torques are computed by simple PD control. Position gains "
"and derivative gains are defined at the top of the source code. If we can't "
"control joints property, we need to adjust those values. Values stored in "
"`m_torque.data`\" are output by calling `m_torqueOut.write()`."
msgstr ""
"onExecute()ではトルクの計算と出力の処理が追加されました。 関節角度を読み込む部分のコードはこれまでと同じですが、 "
"`m_torque.data[i]` に計算したトルクの値を代入しています。 ここでは簡単なPD制御によりトルクの値を求めています。 "
"各関節毎のPgainとDgainはソースコードの先頭付近に固定値で定義されています。 ロボットがうまく制御できない場合はこの値を調整する必要があります。"
" `m_torque.data` にセットした値は `m_torqueOut.write()` により実際のロボットの制御トルクとして出力されます。 "
"出力ポートは値をセットするだけなので入力ポートよりも簡単です。"

#: ../../basics/torque.rst:345
msgid ""
"Go to samples/tutorials/rtc directory and execute the following command."
msgstr ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに移動し、次のコマンドを実行します。"

#: ../../basics/torque.rst:353
msgid "And then, execute the following command."
msgstr "その後、次のコマンドを実行します。"

#: ../../basics/howto-exec-simulation.rst:33
msgid ""
"When you check the checkbox named \"JVRC\", JVRC-1 will be displayed in the "
"scene view as follows."
msgstr ""
"モデルを読み込んだだけではロボットは表示されません。 「アイテム」と書かれたリストのJVRC-1にチェックを入れてください。 "
"すると、以下のようにロボットが表示されるはずです。"

#: ../../basics/howto-exec-simulation.rst:25
msgid ""
"Then load a model file of JVRC-1 by choosing \"OpenHRP Model File\" followed"
" by \"File\", \"Open...\" menus. The filename is "
"samles/tutorials/JVRC-1/main.wrl."
msgstr ""
"そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRC-"
"1のモデルファイルを読み込みます。ファイル名はsamples/tutorials/JVRC-1/main.wrlです。"

#: ../../basics/howto-exec-simulation.rst:129
msgid ""
"Next press \"Start simulation from the beginning\" button in the simulation "
"tool bar. Simulation will start."
msgstr "次に、シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 これにより、画面上でモデルのシミュレーションが開始されます。"

#: ../../basics/howto-exec-simulation.rst:142
msgid ""
"After running simulation, let's save the project. Choose \"Save Project As\""
" menu in \"File\" menu and name the project file."
msgstr ""
"シミュレーションの実行が終わったら、プロジェクトを保存しておきましょう。「ファイル」の「名前を付けてプロジェクトを保存」を選択し、適当なファイル名を付けて保存します。"

#: ../../basics/rt-controller.rst:10
msgid ""
"Open a project file by choosing \"Open Project\" menu of \"File\" menu. The "
"file name is samples/tutorials/cnoid/sample1.cnoid."
msgstr ""
"「メニュー」の「プロジェクトの読み込み」からJVRC-"
"1用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample1.cnoid」です。"

#: ../../basics/torque.rst:11
msgid ""
"Choose \"Open...\" in \"File\" menu and select a project file for JVRC-1. "
"Its name is samples/tutorials/cnoid/sample2.cnoid."
msgstr ""
"「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
"トファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインス "
"トール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample2.cnoid」です。"

#: ../../basics/torque.rst:261
msgid ""
"Choose BodyRTC in the item view and change the value of \"Controller module "
"name\" property to \"RobotTorqueControllerRTC\". This value corresponds to "
"the filename of the RT component. Change the value of \"Auto Connect\" to "
"\"true\"."
msgstr ""
"アイテムビューで「BodyRTC」を選択し、プロパティビューの「コントローラのモジュール名」を「RobotTorqueControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
" さらに、プロパティビューの「自動ポート接続」を true にします。"

#: ../../basics/torque.rst:321
msgid ""
"What we created using the pose roll are called key frames. They are used to "
"generate a robot motion. Press \"Generate body motions\" button on the tool "
"bar."
msgstr ""
"ポーズロールで作成したのはキーフレームと呼びます。これより、プログラムで使用するモーションを生成させます。 "
"ツールバーから「ボディモーションの生成」ボタンを押します。"

#: ../../basics/torque.rst:325
msgid ""
"It is possible to update the robot motion automatically when key frames are "
"updated. It can be enabled by checking  \"Automatic Balance Adjustment "
"Mode\" button on the tool bar."
msgstr ""
"モーションはツールバーのボタンで手動で生成しなくても、キーフレームの更新時に自動生成することができます。 "
"これを有効にするにはツールバーの「自動更新モード」のボタンをオンにしてください。"

#: ../../basics/torque.rst:274
msgid "Set 1000 to the value of \"Internal frame rate\"."
msgstr "「内部フレームレート」の項目を下記のように「1000」に設定します。"

#: ../../basics/torque.rst:287
msgid ""
"Then choose \"Pose Roll\" followed by \"View\", \"Show View\" menus. You "
"will see a window as follows."
msgstr "次に、「表示」の「ビューの表示」から「ポーズロール」を選択します。次の画面が表示されるはずです。"

#: ../../basics/torque.rst:291
msgid ""
"Choose \"JVRC\" in the item view and Press \"Set the present initial pose to"
" the selected bodies\" button on the tool bar to make the robot to be in the"
" initial posture."
msgstr "基準の姿勢を作るため、アイテムビューで「JVRC」を選択し、ツールバーにある「選択ボディを初期姿勢に」のボタンを押します。"

#: ../../basics/torque.rst:329
msgid ""
"You can find a \"motion\" item as a child of \"SampleMotion\" item. Select "
"this item and save its contents by choosing \"Save Selected Items As\" menu."
msgstr "SampleMotion の子供に motion があるので、これを選択し名前を付けて保存ボタンを押します。"

#: ../../basics/howto-exec-simulation.rst:23
msgid ""
"Create a world item named \"World\" first by selecting \"File\", \"New...\" "
"and \"World\" menus."
msgstr "まず、「メニュー」の「ファイル」「新規」より「ワールド」を選択し、ワールドアイテム「World」を追加します。"

#: ../../basics/howto-exec-simulation.rst:47
msgid ""
"Choose \"World\" item in the item view. Then create a \"AISTSimulator\" item"
" by following \"File\", \"New...\" menus."
msgstr ""
"アイテムビューで「World」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「AISTシミュレータ」を選択し、AISTシミュレータ「AISTSimulator」を追加します。"

#: ../../basics/rt-controller.rst:15
msgid ""
"Select \"JVRC\" first in the item view. Then create a BodyRTC item by "
"choosing \"BodyRTC\" menu followed by \"File\", \"New...\" menus."
msgstr ""
"まずアイテムビューで「JVRC」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「BodyRTC」を選択し「BodyRTC」という名前で追加します。"

#: ../../basics/torque.rst:283
msgid ""
"Choose JVRC in the item view first. Then create a pose sequence item named "
"SimpleMotion by choosing \"PoseSeq\" menu followed by \"File\", \"New...\" "
"menus."
msgstr ""
"まずアイテムビューで「JVRC」を選択します。 "
"次に、「メニュー」の「ファイル」「新規」より「ポーズ列」を選択し「SampleMotion」という名前で追加します。"

#: ../../basics/howto-exec-simulation.rst:42
msgid ""
"The window of Choreonoid has a tab named \"Items\". This tab is called "
"\"item view\". Select \"World\" item first in the item view. Then choose "
"\"OpenHRP Model File\" following \"File\",\"Open...\" menus and select the "
"model file for the floor. Its filename is "
"\"/usr/share/choreonoid-1.5/model/misc/floor.wrl\"."
msgstr ""
"Choreonoid の画面にはアイテムと表示されている領域がありますが、これをアイテムビューと呼びます。 "
"まずアイテムビューで「World」を選択します。 "
"次に、「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、床のモデルファイルを開きます。ファイル名は「/usr/share/choreonoid-1.5/model/misc/floor.wrl」です。"

#: ../../basics/rt-controller.rst:428
msgid "シミュレーションを実行する"
msgstr ""

#: ../../basics/rt-controller.rst:184 ../../basics/rt-controller.rst:260
msgid "コントローラのソースコード"
msgstr ""

#: ../../basics/rt-controller.rst:418
msgid "コントローラの設定"
msgstr ""

#: ../../basics/rt-controller.rst:393
msgid "コントローラのビルド"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:29
msgid ""
"モデルファイルは \"World\" アイテム内(階層の下位)に読み込みます。 "
"アイテムビュー内での階層関係・位置はシミュレーションの動作に影響するので注意してください。 "
"位置が異なる場合は、アイテムビュー内のアイテムをドラッグして移動することが可能です。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:53
msgid "シミュレーションの初期状態を設定する"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:55
msgid ""
"ロボットの位置・姿勢の初期状態を設定してプロジェクトに保存しておくことで、Choreonoidを起動し直してプロジェクトを読み込んだ際に設定していた初期状態からシミュレーションを開始することが可能です。"
" 初期状態の設定は以下の手順で行います。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:58
msgid "ボディ／リンクビューでルートリンクの位置・姿勢を編集する。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:62
msgid "関節スライダビューで関節の角度を編集する。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:66
msgid ""
"シーンビュー上でインタラクティブに編集、逆運動学を用いた編集も可能です。 インタラクティブ編集はシーンビューを編集モード(「:ref:`howto-"
"use_view_edit_mode_label`」参照)に切り替えて行います。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:69
msgid "最後にシミュレーションバーの「現在の状態をワールド初期状態に設定」ボタンを押して初期状態を設定し、"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:73
msgid "ファイルバーの「プロジェクトを保存」するのを忘れないでください。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:79
msgid "シミュレーションの基本設定（時間刻み、シミュレーション時間）"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:82
msgid "時間刻み"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:84
msgid ""
"1[ms] を推奨します。時間刻みは計算速度とシミュレーション精度のトレードオフであり、コントローラの実行周期との兼ね合いも考慮して設定します。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:86
msgid "タイムバーの設定ダイアログをボタンをクリックする。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:90
msgid "タイムバーの設定で、内部フレームレートの値を「1000」(1ms)に設定する。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:95
msgid "シミュレーション時間"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:97
msgid "無制限"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:99
#: ../../basics/howto-exec-simulation.rst:107
msgid "アイテムビュー上で \"AISTSimulator\" アイテムを選択状態にする。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:101
#: ../../basics/howto-exec-simulation.rst:109
msgid "プロパティビューの時間範囲の値をダブルクリックして変更する。"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:105
msgid "タイムバー範囲"
msgstr ""

#: ../../basics/howto-exec-simulation.rst:113
msgid "タイムバーの開始時間と終了時間を設定する。"
msgstr ""

#: ../../basics/rt-controller.rst:19
msgid "コントローラの雛形作成"
msgstr ""

#: ../../basics/rt-controller.rst:21
msgid "RTCBuilderを使ってコントローラのソースコードの雛形を作成します。"
msgstr ""

#: ../../basics/rt-controller.rst:24
msgid "RTCBuilderの起動"
msgstr ""

#: ../../basics/rt-controller.rst:26
msgid "以下を実行してRTCBuilder(OpenRTP, Eclipseベース)を起動します。"
msgstr ""

#: ../../basics/rt-controller.rst:32
msgid "Eclipseが起動すると、ワークスペースの場所を尋ねられます。"
msgstr ""

#: ../../basics/rt-controller.rst:36
msgid ""
"Eclipseでは、各種作業を行うフォルダを「ワークスペース」(Work "
"Space)とよび、原則としてすべての生成物はこのフォルダの下に保存されます。ワークスペースはアクセスできるフォルダであれば、どこに作っても構いませんが、このチュートリアルでは「/home/<ユーザ名>/workspace」をワークスペースとします。"
msgstr ""

#: ../../basics/rt-controller.rst:38
msgid "そのままOKボタンを押してください。以下のようなWelcomeページが表示されます。"
msgstr ""

#: ../../basics/rt-controller.rst:42
msgid "Welcomeページはいまは必要ないので左上の「×」ボタンを押して閉じてください。"
msgstr ""

#: ../../basics/rt-controller.rst:46
msgid "右上の「パースペクティブを開く」ボタンを押し、プルダウンの「その他(O)…」ボタンを押します。"
msgstr ""

#: ../../basics/rt-controller.rst:50
msgid ""
"「パースペクティブを開く」ダイアログが表示されるので、「RTC "
"Builder」を選択してOKボタンを押すことで、RTCBuilderが起動します。メニューバーに「カナヅチとRT」のRTCBuilderのアイコンが現れます。"
msgstr ""

#: ../../basics/rt-controller.rst:66
msgid "既知のバグが影響している可能性があるので、対処方法として以下を行ってください。"
msgstr ""

#: ../../basics/rt-controller.rst:68
msgid "logger.properties ファイルを作成して以下のようにログファイルパターンを記載しておく。"
msgstr ""

#: ../../basics/rt-controller.rst:75
msgid "起動時のオプションでこのファイルをロガークラスのコンフィギュレーションとして読み込ませて\"openrtp\"を起動する。"
msgstr ""

#: ../../basics/rt-controller.rst:82
msgid "新規プロジェクトの作成"
msgstr ""

#: ../../basics/rt-controller.rst:84
msgid ""
"RTコンポーネントを作成するために、RTCBuilderで新規プロジェクトを作成する必要が有ります。プロジェクトを作成する方法は2種類あります。"
msgstr ""

#: ../../basics/rt-controller.rst:86
msgid "画面上部のメニューから[ファイル]－[新規]－[プロジェクト]を選択 (Eclipse共通)"
msgstr ""

#: ../../basics/rt-controller.rst:88
msgid "「新規プロジェクト」画面において，[その他]－[RTC Builder]を選択し、[次へ]をクリック"
msgstr ""

#: ../../basics/rt-controller.rst:92
msgid "メニューバーの「RTCBuilder」のアイコンをクリック"
msgstr ""

#: ../../basics/rt-controller.rst:94
msgid ""
"どちらの方法でも、次のようなプロジェクト作成ウィザードが開始されます。「プロジェクト名」欄に作成するプロジェクト名(ここでは\"RobotControllerRTC\")を入力して「完了」を押します。"
msgstr ""

#: ../../basics/rt-controller.rst:98
msgid "指定した名称のプロジェクトが生成され、パッケージエクスプローラ内に追加されます。"
msgstr ""

#: ../../basics/rt-controller.rst:100
msgid "生成したプロジェクト内には、デフォルト値が設定されたRTCプロファイルXML(RTC.xml)が自動的に生成されます。"
msgstr ""

#: ../../basics/rt-controller.rst:106
msgid "プロファイル情報入力とコードの生成"
msgstr ""

#: ../../basics/rt-controller.rst:108
msgid ""
"RTCBuilderのエディタで、いちばん左の「基本」タブを選択し、基本情報を入力します。RTコンポーネントの仕様(名前)の他に、概要やバージョン等を入力します。ラベルが赤字の項目は必須項目です。その他はデフォルトで構いません。"
msgstr ""

#: ../../basics/rt-controller.rst:111
msgid "モジュール名:"
msgstr ""

#: ../../basics/rt-controller.rst:111
msgid "RobotControllerRTC"
msgstr ""

#: ../../basics/rt-controller.rst:112
msgid "モジュール概要:"
msgstr ""

#: ../../basics/rt-controller.rst:112
msgid "Robot Controller component"
msgstr ""

#: ../../basics/rt-controller.rst:113
msgid "バージョン:"
msgstr ""

#: ../../basics/rt-controller.rst:113
msgid "1.0.0"
msgstr ""

#: ../../basics/rt-controller.rst:114
msgid "ベンダ名:"
msgstr ""

#: ../../basics/rt-controller.rst:114
msgid "AIST"
msgstr ""

#: ../../basics/rt-controller.rst:115
msgid "モジュールカテゴリ:"
msgstr ""

#: ../../basics/rt-controller.rst:115
msgid "Generic"
msgstr ""

#: ../../basics/rt-controller.rst:116
msgid "コンポーネント型:"
msgstr ""

#: ../../basics/rt-controller.rst:116
msgid "STATIC"
msgstr ""

#: ../../basics/rt-controller.rst:117
msgid "アクティビティ型:"
msgstr ""

#: ../../basics/rt-controller.rst:117
msgid "PERIODIC"
msgstr ""

#: ../../basics/rt-controller.rst:118
msgid "コンポーネント種類:"
msgstr ""

#: ../../basics/rt-controller.rst:119
msgid "最大インスタンス数:"
msgstr ""

#: ../../basics/rt-controller.rst:119
msgid "1"
msgstr ""

#: ../../basics/rt-controller.rst:120
msgid "実行型:"
msgstr ""

#: ../../basics/rt-controller.rst:120
msgid "PeriodicExecutionContext"
msgstr ""

#: ../../basics/rt-controller.rst:121
msgid "実行周期:"
msgstr ""

#: ../../basics/rt-controller.rst:121
msgid "1000.0"
msgstr ""

#: ../../basics/rt-controller.rst:126
msgid "次に「アクティビティ」タブを選択し、使用するアクションコールバックを指定します。"
msgstr ""

#: ../../basics/rt-controller.rst:128
msgid ""
"本コンポーネントでは、onActivated(), onDeactivated(), onExecute() "
"コールバックを使用します。下図のように(1)コールバックをクリック後に(2)のラジオボタン\"ON\"にチェックを入れます。使用するコールバックごとに同様の手順で\"ON\"にしていきます。"
msgstr ""

#: ../../basics/rt-controller.rst:132
msgid ""
"さらに、「データポート」タブを選択し、データポートの情報を入力します。 "
"以下のように入力します。なお、変数名や表示位置はオプションなのでデフォルトのままで構いません。"
msgstr ""

#: ../../basics/rt-controller.rst:134
msgid "InPort プロファイル:"
msgstr ""

#: ../../basics/rt-controller.rst:137
msgid "ポート名:"
msgstr ""

#: ../../basics/rt-controller.rst:138
msgid "データ型:"
msgstr ""

#: ../../basics/rt-controller.rst:138
msgid "RTC::TimeDoubleSeq"
msgstr ""

#: ../../basics/rt-controller.rst:139
msgid "変数名:"
msgstr ""

#: ../../basics/rt-controller.rst:140
msgid "表示位置:"
msgstr ""

#: ../../basics/rt-controller.rst:140
msgid "LEFT"
msgstr ""

#: ../../basics/rt-controller.rst:143
msgid "OutPort プロファイル:"
msgstr ""

#: ../../basics/rt-controller.rst:145
msgid "なし"
msgstr ""

#: ../../basics/rt-controller.rst:149
msgid ""
"次に、「言語・環境」タブを選択し、プログラミング言語を選択します。 "
"ここでは、「C++」を選択します。なお、言語・環境はデフォルト等が設定されておらず、指定し忘れるとコード生成時にエラーになりますので、必ず言語の指定を行うようにしてください。"
msgstr ""

#: ../../basics/rt-controller.rst:151
msgid ""
"また、C++の場合デフォルトではCMakeを利用してビルドすることになっていますが、旧式のVCのプロジェクトやソリューションを直接RTCBuilderが生成する方法を利用したい場合は"
" Use old build environment をチェックしてください。"
msgstr ""

#: ../../basics/rt-controller.rst:155
msgid "最後に、「基本」タブにある「コード生成」ボタンをクリックし、コンポーネントの雛型を生成します。"
msgstr ""

#: ../../basics/rt-controller.rst:159
msgid ""
"※ 生成されるコード群は、eclipse起動時に指定したワークスペースフォルダの中に生成されます。現在のワークスペースは、「ファイル(F)」 > "
"「ワークスペースの切り替え(W)...」で確認することができます。"
msgstr ""

#: ../../basics/rt-controller.rst:186
msgid ""
"コード作成操作により、コントローラのソースコード一式がワークスペース内の領域「$HOME/workspace/RobotControllerRTC/」に生成されます。"
msgstr ""

#: ../../basics/rt-controller.rst:189
msgid "コントローラのヘッダファイル"
msgstr ""

#: ../../basics/rt-controller.rst:191
msgid "コントローラのヘッダファイルは以下になります。"
msgstr ""

#: ../../basics/rt-controller.rst:193
msgid "$HOME/workspace/include/RobotControllerRTC/RobotControllerRTC.h"
msgstr ""

#: ../../basics/rt-controller.rst:195 ../../basics/rt-controller.rst:266
msgid "※ 一部のコメント行は除去しています。"
msgstr ""

#: ../../basics/rt-controller.rst:249
msgid "今回、ヘッダファイルは変更しません。"
msgstr ""

#: ../../basics/rt-controller.rst:262
msgid "コントローラのソースコードは以下になります。"
msgstr ""

#: ../../basics/rt-controller.rst:264
msgid "$HOME/workspace/RobotControllerRTC/src/RobotControllerRTC.cpp"
msgstr ""

#: ../../basics/rt-controller.rst:343
msgid "これはコントローラの雛形なので、onExecute() コールバックなどに処理を追加します。"
msgstr ""

#: ../../basics/rt-controller.rst:345
msgid "雛形に追加するコードの差分(diff)は以下の通りです。"
msgstr ""

#: ../../basics/rt-controller.rst:380
msgid "RobotControllerRTCのコンストラクタで、m_angleIn と m_angle を関連付けています。"
msgstr ""

#: ../../basics/rt-controller.rst:382
msgid "RTCの初期化時に呼ばれるonInitialize()で、m_angleInをRTCの入力ポートqと関連づけています。"
msgstr ""

#: ../../basics/rt-controller.rst:420
msgid "プロジェクト上でRTコンポーネント(RTC)を作成しただけでは、ロボットの制御を行うことができません。"
msgstr ""

#: ../../basics/rt-controller.rst:395
msgid ""
"RTコンポーネントのソースファイル一式が生成されたディレクトリで以下を実行します。CMakeを利用してビルド環境のConfigureを行ってから、makeを実行してビルドします。"
msgstr ""

#: ../../basics/rt-controller.rst:405
msgid ""
"ビルドに成功するとRTCコントローラモジュール「src/RobotControllerRTC.so」が生成されるので、以下を実行して配置します。"
msgstr ""

#: ../../basics/rt-controller.rst:434
msgid "このようにして得られる関節角度を基にトルクをロボットに入力することでロボットの制御を行うことができます。この後のサンプルで詳しく解説します。"
msgstr ""

#: ../../basics/rt-controller.rst:54
msgid "RTCBuilderを起動する際に以下のエラーが生じることがあります。"
msgstr ""

#: ../../basics/rt-controller.rst:60
msgid "RTCBuilderを起動した端末には以下のメッセージが出ているかと思います。"
msgstr ""

#: ../../basics/rt-controller.rst:118
msgid "DataFlow"
msgstr ""

#: ../../basics/rt-controller.rst:137
msgid "q"
msgstr ""

#: ../../basics/rt-controller.rst:139
msgid "angle"
msgstr ""

#: ../../basics/rt-controller.rst:251
msgid ""
"RTC::TimedDoubleSeq というのは、時刻情報とdouble型の実際の値を持つOpenRTM固有の複合型です。 "
"SeqはOpenRTMにおける配列型のように扱います。 OpenRTMにおけるdouble[]型と考えておけばよいでしょう。"
msgstr ""

#: ../../basics/rt-controller.rst:255
msgid ""
"InPort<RTC::TimedDoubleSeq> はRTCの入力ポートを表す型であり、入力ポートを操作するにはこれを利用します。 "
"m_angleは入力ポートから関節角度を受けとるための変数です。 m_angleInで取得した値はm_angleで参照します。"
msgstr ""

#: ../../basics/rt-controller.rst:347
msgid ""
"patch コマンドで差分を適用する場合は、こちらの :download:`差分ファイル "
"<src/RobotControllerRTC.cpp.diff>` を取得してご利用ください。"
msgstr ""

#: ../../basics/rt-controller.rst:384
msgid ""
"onExecute()はRTCの実行中に定期的に呼ばれます。 ここでは関節角度を取得し標準出力に表示する処理を行っています。 "
"m_angleIn.isNew()とは新しいデータが到着しているか確認する関数です。 "
"onExecute()の実行時にはデータが到着しているかどうかが分からないので、ここでチェックしています。 "
"新しいデータが来ていた場合にはm_angleIn.read()でデータを読み込みます。 "
"読み込んだデータは自動的にm_angleに格納され、m_angle.dataとして取得できます。 "
"m_angle.dataは各関節毎に配列の値となっています。"
msgstr ""

#: ../../basics/rt-controller.rst:422
msgid ""
"Choreonoidの操作画面に戻って、アイテムビューで「BodyRTC」を選択するとプロパティのタブ(プロパティビューと言います)にRTCの設定が表示されます。プロパティビューの「コントローラのモジュール名」を「RobotControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。さらに、プロパティビューの「自動ポート接続」を"
" true にします。"
msgstr ""

#: ../../basics/rt-controller.rst:430
msgid ""
"シミュレーションツールバーの「シミュレーション開始ボタン」を押します。シミュレーションを実行するとChoreonoidを実行している端末に関節角度(m_angle)の値が表示されるはずです。"
msgstr ""

#: ../../basics/torque.rst:295
msgid "ポーズロールにおいて、1.0 を選択して「挿入」を押します。"
msgstr ""

#: ../../basics/torque.rst:299
msgid "今回は首を左右に振る動作パターンを作成します。以下の手順でポーズを作成してください。"
msgstr ""

#: ../../basics/torque.rst:301
msgid ""
"ポーズロールにおいて 2.0 を選択し、関節スライダにおいて首関節のヨー軸「NECK_Y」を 70.0 にセットし、ポーズロールの「挿入」を押す。"
msgstr ""

#: ../../basics/torque.rst:305
msgid ""
"ポーズロールにおいて 3.0 を選択し、関節スライダにおいて首関節のヨー軸「NECK_Y」を 0.0 にセットし、ポーズロールの「挿入」を押す。"
msgstr ""

#: ../../basics/torque.rst:309
msgid ""
"ポーズロールにおいて 4.0 を選択し、関節スライダにおいて首関節のヨー軸「NECK_Y」を -70.0 にセットし、ポーズロールの「挿入」を押す。"
msgstr ""

#: ../../basics/torque.rst:313
msgid ""
"ポーズロールにおいて 5.0 を選択し、関節スライダにおいて首関節のヨー軸「NECK_Y」を 0.0 にセットし、ポーズロールの「挿入」を押す。"
msgstr ""

#: ../../basics/torque.rst:317
msgid ""
"ポーズロールにおいて 6.0 を選択し、関節スライダにおいて首関節のヨー軸「NECK_R」を -50.0 にセットし、ポーズロールの「挿入」を押す。"
msgstr ""

#: ../../basics/torque.rst:333
msgid ""
"「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに「RobotPattern.yaml」というファイルで保存します。"
msgstr ""

#: ../../basics/torque.rst:335
msgid "同様に、SampleMotion を選択し名前を付けて保存ボタンを押します。"
msgstr ""

#: ../../basics/torque.rst:339
msgid ""
"こちらは、「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/」ディレクトリに「SampleMotion.pseq」というファイルで保存します。"
msgstr ""

#: ../../basics/torque.rst:363
msgid ""
"ポーズデータ「SampleMotion.pseq」をデフォルトでロードするプロジェクトファイル sample3.cnoid で choreonoid "
"を起動します。 "
"プロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample3.cnoid」です。"
msgstr ""

#: ../../basics/torque.rst:370
msgid ""
"シミュレーションツールバーの「シミュレーション開始ボタン」を押します。シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、立ったままの状態になったはずです。また、先ほど作成した首振りのモーションを実行しているはずです。"
msgstr ""

#: ../../basics/torque.rst:376
msgid "カメラ映像の表示"
msgstr ""

#: ../../basics/torque.rst:378
msgid "別のシーンビューを生成して、同時にカメラの映像を表示してみましょう。"
msgstr ""

#: ../../basics/torque.rst:380
msgid "メインメニュー「表示」の「ビューの生成」から「シーン」を選択します。次のウィンドウが表示されるので OK をクリックします。"
msgstr ""

#: ../../basics/torque.rst:384
msgid ""
"新しいシーンビュー「シーン2」が生成されます。 「シーン2」タブをクリックして選択し、カメラの選択ボタンでロボットのカメラ「JVRC - "
"rcamera」などに表示を切り替えます。"
msgstr ""

#: ../../basics/torque.rst:389
msgid "「シーン2」タブをドラッグして二つのシーンを同時に表示することもできます。"
msgstr ""

#: ../../basics/rt-controller.rst:414
msgid ""
"Choreonoidでは読み込むRTCコントローラのモジュールは、Choreonoidのインストール先の共有ディレクトリ(/usr/lib/choreonoid-1.5/rtc)に配置するか、絶対パスで指定する必要があります。"
msgstr ""

#~ msgid ""
#~ "Choreonoidでは読み込むRTCコントローラのモジュールは、Choreonoidのインストール先の共有ディレクトリ(/usr/lib/choreonoid-1.5/rtc)に配置しなければなりません。"
#~ msgstr ""

#~ msgid "The pose roll should be as follows."
#~ msgstr "ポーズロールは次のようになるはずです。"

#~ msgid "Repeat this procedure until length of the motion becomes 15[s]."
#~ msgstr "あとはこれを繰り返し、15.0まで生成します。"

#~ msgid ""
#~ "Save the robot motion as RobotMotion.yaml in samples/tutorials/rtc "
#~ "directory."
#~ msgstr ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/」ディレクトリに「RobotMotion.yaml」というファイルで保存します。"

#~ msgid ""
#~ "You can find a sample project file created by this tutorial in "
#~ "samples/tutorials/cnoid/sample3.cnoid."
#~ msgstr ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「samples/tutorials/cnoid/sample3.cnoid」に保存されています。"

#~ msgid ""
#~ "Press \"Start simulation from the beginning\" button on the simulation tool "
#~ "bar. The robot doesn't fall down for 15[s] but after that, it falls down. "
#~ "Because duration of the robot motion is 15[s]."
#~ msgstr ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で15秒間の間立ったままの状態になったはずです。 "
#~ "これは、JVRCの制御を行うためのモーションデータが15秒分しか用意していないためです。"

#~ msgid ""
#~ "Select 1.0 in the pose roll and press \"Insert\". Select 2.0, 3.0 and 4.0 "
#~ "and press \"Insert\" as well."
#~ msgstr "ポーズロールにおいて、1.0 を選択して「挿入」を押します。 同様に 2.0, 3.0, 4.0 を選択して「挿入」を押します。"

#~ msgid "RTCBuilderを起動した端末に以下のメッセージが出てRTCBuilderを起動できない場合があります。"
#~ msgstr ""

#~ msgid "DataFlow (DataFlowComponent)"
#~ msgstr ""

#~ msgid "neck"
#~ msgstr ""

#~ msgid ""
#~ "RTC::TimedDoubleSeq "
#~ "というのは、時刻情報とdouble型の実際の値を持つOpenRTM固有の複合型です。SeqはOpenRTMにおける配列型のように扱います。OpenRTMにおけるdouble[]型と考えておけばよいでしょう。"
#~ msgstr ""

#~ msgid ""
#~ "InPort<RTC::TimedDoubleSeq> "
#~ "はRTCの入力ポートを表す型であり、入力ポートを操作するにはこれを利用します。m_angleは入力ポートから関節角度を受けとるための変数です。m_angleInで取得した値はm_angleで参照します。"
#~ msgstr ""

#~ msgid ""
#~ "onExecute()はRTCの実行中に定期的に呼ばれます。ここでは関節角度を取得し標準出力に表示する処理を行っています。m_angleIn.isNew()とは新しいデータが到着しているか確認する関数です。onExecute()の実行時にはデータが到着しているかどうかが分からないので、ここでチェックしています。新しいデータが来ていた場合にはm_angleIn.read()でデータを読み込みます。読み込んだデータは自動的にm_angleに格納され、m_angle.dataとして取得できます。m_angle.dataは各関節毎に配列の値となっています。"
#~ msgstr ""

#~ msgid ""
#~ "アイテムビューで「BodyRTC」を選択するとプロパティのタブ(プロパティビューと言います)にRTCの設定が表示されます。プロパティビューの「コントローラのモジュール名」を「RobotControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。さらに、プロパティビューの「自動ポート接続」を"
#~ " true にします。"
#~ msgstr ""

#~ msgid ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。シミュレーションを実行するとchoreonoidを実行している端末に関節角度(m_angle)の値が表示されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "Contents of the header file of the controller is as follows. This file was "
#~ "created by modifying SR1WalkControllerRTC.h which is included in Choreonoid."
#~ msgstr ""
#~ "コントローラのヘッダのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.hを基にしています。"

#~ msgid ""
#~ "`RTC::InPort<RTC::TimedDoubleSeq>` defines an input data port. m_angle is a "
#~ "buffer to receive joint angles. Joint angles read through m_angleIn are "
#~ "stored in m_angle."
#~ msgstr ""
#~ "`RTC::InPort<RTC::TimedDoubleSeq>` はRTCの入力ポートを表す型であり、入力ポートを操作するにはこれを利用します。 "
#~ "m_angleは入力ポートから関節角度を受けとるための変数です。m_angleInで取得した値はm_angleで参照します。"

#~ msgid ""
#~ "The following shows source code of the controller. It was developed based on"
#~ " SR1WalkControllerRTC.cpp which is included in Choreonoid."
#~ msgstr ""
#~ "コントローラのソースコードは以下になります。Choreonoidに含まれるサンプルのSR1WalkControllerRTC.cppを基にしています。 "

#~ msgid ""
#~ "m_angleIn and m_angle are associated by constructor of RobotControllerRTC."
#~ msgstr "RobotControllerRTCのコンストラクタで、 m_angleIn と m_angle を関連付けています。"

#~ msgid ""
#~ "onInitialized is called right after a RT component is constructed. It "
#~ "registers the input port."
#~ msgstr "RTCの初期化時に呼ばれるonInitialize()で、m_angleInをRTCの入力ポートqと関連づけています。"

#~ msgid ""
#~ "onExecute() is a function called periodically. Its implementation of this "
#~ "tutorial just reads joint angles and outputs those values to standard "
#~ "output. m_angleIn.isNew() checks if new data arrived or not. If the arrival "
#~ "is detected, m_angleIn.read() reads data and stores values to m_angle. Joint"
#~ " angles are accesible through m_angle.data."
#~ msgstr ""
#~ "onExecute()はRTCの実行中に定期的に呼ばれます。ここでは関節角度を取得し標準出力に表示する処理を行っています。 "
#~ "m_angleIn.isNew()とは新しいデータが到着しているか確認する関数です。 "
#~ "onExecute()の実行時にはデータが到着しているかどうかが分からないので、ここでチェックしています。新しいデータが来ていた場合にはm_angleIn.read()でデータを読み込みます。読み込んだデータは自動的にm_angleに格納され、m_angle.dataとして取得できます。"
#~ " m_angle.dataは各関節毎に配列の値となっています。"

#~ msgid "Setup the controller"
#~ msgstr "コントローラの設定"

#~ msgid ""
#~ "To connect Choreonoid and the RT component we developed, we need to "
#~ "configure BodyRTC item."
#~ msgstr "プロジェクト上でRTコンポーネント(RTC)を作成しただけでは、ロボットの制御を行うことができません。"

#~ msgid "Then execute the following command."
#~ msgstr "その後、次のコマンドを実行します。"

#~ msgid ""
#~ "Applying joint torques computed using joint angles, we can control joint "
#~ "positions. The next tutorial explains how to do that."
#~ msgstr ""
#~ "このようにして得られる関節角度を基にトルクをロボットに入力することでロボットの制御を行うことができます。この後のサンプルで詳しく解説します。"

#~ msgid ""
#~ "These source codes are stored as "
#~ "samples/tutorials/rtc/RobotControllerRTC.cpp and "
#~ "samples/tutorials/rtc/RobotControllerRTC.h."
#~ msgstr ""
#~ "これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/rtc/RobotControllerRTC.cpp」と「samples/tutorials/rtc/RobotControllerRTC.h」に保存されています。"

#~ msgid ""
#~ "This command generates RobotControllerRTC.so under samples/tutorials/rtc "
#~ "directory."
#~ msgstr ""
#~ "これにより、「samples/tutorials/rtc/」ディレクトリに「RobotControllerRTC.so」というファイルが作成されるはずです。"

#~ msgid ""
#~ "You can find a sample project file created by this tutorial in "
#~ "samples/tutorials/cnoid/sample2.cnoid."
#~ msgstr ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/tutorials/cnoid/sample2.cnoid」に保存されています。"

#~ msgid ""
#~ "`RTC::TimedDoubleSeq` is a type which contains time and double precision "
#~ "values. Seq means a sequence of values just like double[]."
#~ msgstr ""
#~ "`RTC::TimedDoubleSeq` というのは、時刻情報とdouble型の実際の値を持つOpenRTM固有の複合型です。 "
#~ "SeqはOpenRTMにおける配列型のように扱います。 OpenRTMにおけるdouble[]型と考えておけばよいでしょう。"

#~ msgid ""
#~ "In order to use RT components from Choreonoid, we need to put them in the "
#~ "shared directory of Choreonoid(/usr/lib/choreonoid-1.5/rtc). \"make "
#~ "install\" command does this automatically."
#~ msgstr ""
#~ "Choreonoidでは読み込むRTCコントローラのモジュールはChoreonoidのインストール先の共有ディレクトリ(/usr/lib/choreonoid-1.5/rtc)に配置しなければなりません。\"make"
#~ " install\"ではこの処理を自動的に行ってくれます。"

#~ msgid ""
#~ "Press \"Start simulation from the beginning\" button on the simulation tool "
#~ "bar. While the simulation is running, joint angles stored in m_angle are "
#~ "displayed in the terminal you launched Choreonoid."
#~ msgstr ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行するとchoreonoidを実行している端末に関節角度(m_angle)の値が表示されるはずです。"

#~ msgid ""
#~ "When you select BodyRTC item, its properties are displayed in the tab which "
#~ "is called \"property view\". Set \"RobotControllerRTC\" to the value of "
#~ "\"Controller module name\". This corresponds to the filename of the RT "
#~ "component. Set true to the value of \"Auto Connect\"."
#~ msgstr ""
#~ "アイテムビューで「BodyRTC」を選択するとプロパティのタブ(プロパティビューと言います)にRTCの設定が表示されます。 "
#~ "プロパティビューの「コントローラのモジュール名」を「RobotControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
#~ " さらに、プロパティビューの「自動ポート接続」を true にします。"

#~ msgid ""
#~ "The window of Choreonoid has a tab named \"Items\". This tab is called "
#~ "\"item view\". Select \"World\" item first in the item view. Then choose "
#~ "\"OpenHRP model file\" following \"File\",\"Open...\" menus and select the "
#~ "model file for the floor. Its filename is "
#~ "\"/usr/share/choreonoid-1.5/model/misc/floor.wrl\"."
#~ msgstr ""
#~ "Choreonoid の画面にはアイテムと表示されている領域がありますが、これをアイテムビューと呼びます。 "
#~ "まずアイテムビューで「World」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、床のモデルファイルを開きます。ファイル名は「/usr/share/choreonoid-1.5/model/misc/floor.wrl」です。"

#~ msgid ""
#~ "When you select BodyRTC item, its properties are displayed in the tab which "
#~ "is called \"property view\". Set \"RobotControllerRTC\" to the value of "
#~ "\"Controller module name\". This corresponds to the filename of the RT "
#~ "component. Set true to the value of \"Automatic port connection\"."
#~ msgstr ""
#~ "アイテムビューで「BodyRTC」を選択するとプロパティのタブ(プロパティビューと言います)にRTCの設定が表示されます。 "
#~ "プロパティビューの「コントローラのモジュール名」を「RobotControllerRTC」とします。これは「コントローラのビルド」で作成したモジュールのパスと対応しています。"
#~ " さらに、プロパティビューの「自動ポート接続」を true にします。"

#~ msgid ""
#~ "Create a world item named \"World\" first by selecting \"File\", \"New\" and"
#~ " \"World\" menus."
#~ msgstr "まず、「メニュー」の「ファイル」「新規」より「ワールド」を選択し、ワールドアイテム「World」を追加します。"

#~ msgid ""
#~ "Choose \"World\" item in the item view. Then create a \"AISTSimulator\" item"
#~ " by following \"File\", \"New\" menus."
#~ msgstr ""
#~ "アイテムビューで「World」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「AISTシミュレータ」を選択し、AISTシミュレータ「AISTSimulator」を追加します。"

#~ msgid ""
#~ "Select \"JVRC\" first in the item view. Then create a BodyRTC item by "
#~ "choosing \"BodyRTC\" menu followed by \"File\", \"New\" menus."
#~ msgstr ""
#~ "まずアイテムビューで「JVRC」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「ポーズ列」を選択し「SampleMotion」という名前で追加します。"

#~ msgid ""
#~ "Choose JVRC in the item view first. Then create a pose sequence item named "
#~ "SimpleMotion by choosing \"Pose Sequence\" menu followed by \"File\", "
#~ "\"New\" menus."
#~ msgstr ""
#~ "まずアイテムビューで「JVRC」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「ポーズ列」を選択し「SampleMotion」という名前で追加します。"

#~ msgid "Set 1000 to the value of \\\"internal frame rate\\\"."
#~ msgstr ""

#~ msgid ""
#~ "Then choose \\\"Pose roll\\\" followed by \\\"Display\\\", \\\"Display "
#~ "View\\\" menus. You will see a window as follows."
#~ msgstr ""

#~ msgid ""
#~ "Choose \\\"JVRC\\\" in the item view and Press \\\"initial pose\\\" button "
#~ "on the tool bar to make the robot to be in the initial posture."
#~ msgstr ""

#~ msgid ""
#~ "You can find a \\\"motion\\\" item as a child of \\\"SampleMotion\\\" item. "
#~ "Select this item and save its contents by choosing \\\"Save as\\\" menu."
#~ msgstr ""

#~ msgid ""
#~ "Select 1.0 in the pose roll and press \\\"insert\\\". Select 2.0, 3.0 and "
#~ "4.0 and press \\\"insert\\\" as well."
#~ msgstr ""

#~ msgid ""
#~ "What we created using the pose roll are called key frames. They are used to "
#~ "generate a robot motion. Press \\\"create body motion\\\" button on the tool"
#~ " bar."
#~ msgstr ""

#~ msgid ""
#~ "It is possible to update the robot motion automatically when key frames are "
#~ "updated. It can be enabled by checking  \\\"automatic update mode\\\" button"
#~ " on the tool bar."
#~ msgstr ""

#~ msgid ""
#~ "Choose BodyRTC in the item view and change the value of \\\"Controller "
#~ "module name\\\" property to \\\"RobotTorqueControllerRTC\\\". This value "
#~ "corresponds to the filename of the RT component. Change the value of "
#~ "\\\"Automatic connection\\\" to \\\"true\\\"."
#~ msgstr ""

#~ msgid ""
#~ "Press \\\"start simulation\\\" button on the simulation tool bar. The robot "
#~ "doesn't fall down for 15[s] but after that, it falls down. Because duration "
#~ "of the robot motion is 15[s]."
#~ msgstr ""

#~ msgid ""
#~ "Choose \\\"Open\\\" in \\\"File\\\" menu and select a project file for "
#~ "JVRC-1. Its name is samples/tutorials/cnoid/sample2.cnoid."
#~ msgstr ""

#~ msgid ""
#~ "Choose JVRC in the item view first. Then create a pose sequence item named "
#~ "SimpleMotion by choosing \\\"Pose Sequence\\\" menu followed by "
#~ "\\\"File\\\", \\\"New\\\" menus."
#~ msgstr ""

#~ msgid ""
#~ "Open a project file by choosing \\\"Open a project file\\\" menu of "
#~ "\\\"File\\\" menu.The file name is samples/tutorials/cnoid/sample1.cnoid."
#~ msgstr ""

#~ msgid ""
#~ "Select \\\"JVRC\\\" first in the item view. Then create a BodyRTC item by "
#~ "choosing \\\"BodyRTC\\\" menu followed by \\\"File\\\", \\\"New\\\" menus."
#~ msgstr ""

#~ msgid ""
#~ "When you select BodyRTC item, its properties are displayed in the tab which "
#~ "is called \\\"property view\\\". Set \\\"RobotControllerRTC\\\" to the value"
#~ " of \\\"Controller module name\\\". This corresponds to the filename of the "
#~ "RT component. Set true to the value of \\\"Automatic port connection\\\"."
#~ msgstr ""

#~ msgid ""
#~ "In order to use RT components from Choreonoid, we need to put them in the "
#~ "shared directory of Choreonoid(/usr/lib/choreonoid-1.5/rtc). \\\"make "
#~ "install\\\" command does this automatically."
#~ msgstr ""

#~ msgid ""
#~ "Press \\\"start simulation\\\" button on the simulation tool bar. While the "
#~ "simulation is running, joint angles stored in m_angle are displayed in the "
#~ "terminal you launched Choreonoid."
#~ msgstr ""

#~ msgid ""
#~ "The window of Choreonoid has a tab named \\\"item\\\". This tab is called "
#~ "\\\"item view\\\". Select \\\"World\\\" item first in the item view. Then "
#~ "choose \\\"OpenHRP model file\\\" following \\\"File\\\",\\\"Open\\\" menus "
#~ "and select the model file for the floor. Its filename is "
#~ "\\\"/usr/share/choreonoid-1.5/model/misc/floor.wrl\\\"."
#~ msgstr ""

#~ msgid ""
#~ "Choose \\\"World\\\" item in the item view. Then create a "
#~ "\\\"AISTSimulator\\\" item by following \\\"File\\\", \\\"New\\\" menus."
#~ msgstr ""

#~ msgid ""
#~ "Next press \\\"Start simulation\\\" button in the simulation tool bar. "
#~ "Simulation will start."
#~ msgstr ""

#~ msgid ""
#~ "After running simulation, let's save the project. Choose \\\"Save as\\\" "
#~ "menu in \\\"File\\\" menu and name the project file."
#~ msgstr ""

#~ msgid ""
#~ "Then load a model file of JVRC-1 by choosing \\\"OpenHRP model file\\\" "
#~ "followed by \\\"File\\\", \\\"Open\\\" menus. The filename is "
#~ "samles/tutorials/JVRC-1/main.wrl."
#~ msgstr ""

#~ msgid ""
#~ "When you check the checkbox named \\\"JVRC\\\", JVRC-1 will be displayed in "
#~ "the scene view as follows."
#~ msgstr ""

#~ msgid ""
#~ "Create a world item named \\\\\\\"World\\\\\\\" first by selecting "
#~ "\\\"File\\\", \\\"New\\\"\" \" and \\\"World\\\" menus."
#~ msgstr "まず、「メニュー」の「ファイル」「新規」より「ワールド」を選択し、ワールドアイテム「World」を追加します。"

#~ msgid ""
#~ "Create a world item named \\\"World\\\" first by selecting \"File\", \"New\""
#~ " and \"World\" menus."
#~ msgstr "まず、「メニュー」の「ファイル」「新規」より「ワールド」を選択し、ワールドアイテム「World」を追加します。"

#~ msgid ""
#~ "Choose \"World\" item in the item view. Then create a \"AISTsimulator\" item"
#~ " by following \"File\", \"New\" menus."
#~ msgstr ""
#~ "アイテムビューで「World」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「AISTシミュレータ」を選択し、AISTシミュレータ「AISTSimulator」を追加します。"

#~ msgid ""
#~ "`RTC::TimedDoubleSeq` is a type which contains time and double precision "
#~ "values. Seq means a sequence of values just like double[]. "
#~ msgstr ""
#~ "`RTC::TimedDoubleSeq` というのは、時刻情報とdouble型の実際の値を持つOpenRTM固有の複合型です。 "
#~ "SeqはOpenRTMにおける配列型のように扱います。 OpenRTMにおけるdouble[]型と考えておけばよいでしょう。"

#~ msgid ""
#~ "Computation of joint torques is added to onExecute(). After reading joint "
#~ "angles, joint torques are computed and stored to m_torque.data[i]. In this "
#~ "tutorial, joint torques are computed by simple PD control. Position gains "
#~ "and derivative gains are defined at the top of the source code. If we can't "
#~ "control joints property, we need to adjust those values. Values stored in "
#~ "`m_torque.data` are output by calling `m_torqueOut.write()`."
#~ msgstr ""
#~ "onExecute()ではトルクの計算と出力の処理が追加されました。 関節角度を読み込む部分のコードはこれまでと同じですが、 "
#~ "`m_torque.data[i]` に計算したトルクの値を代入しています。 ここでは簡単なPD制御によりトルクの値を求めています。 "
#~ "各関節毎のPgainとDgainはソースコードの先頭付近に固定値で定義されています。 ロボットがうまく制御できない場合はこの値を調整する必要があります。"
#~ " `m_torque.data` にセットした値は `m_torqueOut.write()` により実際のロボットの制御トルクとして出力されます。 "
#~ "出力ポートは値をセットするだけなので入力ポートよりも簡単です。"

#~ msgid ""
#~ "This section explains how to connect Choreonoid and a RT component by "
#~ "developing an example component which read joint angles"
#~ msgstr "ここではJVRC-1のモデルにRTコンポーネントのコントローラを接続し、ロボットの関節角度を取得できるようにします。"

#~ msgid ""
#~ "まずアイテムビューで「JVRC-1」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「BodyRTC」を選択し「BodyRTC」という名前で追加します。"
#~ msgstr ""

#~ msgid "サンプルプロジェクトについて"
#~ msgstr ""

#~ msgid "プロジェクトを開く"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「サンプルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「samples/cnoid/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "これらのソースコードは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/RobotControllerRTC.cpp」と「model/robot/RTC/RobotControllerRTC.h」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/」ディレクトリに移動し、次のコマンドを実行します。 ::"
#~ msgstr ""

#~ msgid ""
#~ "これにより、「model/robot/RTC/」ディレクトリに「RobotControllerRTC.so」というファイルが作成されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "これらのソースコードは "
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/RobotTorqueControllerRTC.cpp」と"
#~ " 「model/robot/RTC/RobotTorqueControllerRTC.h」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/RTC/」ディレクトリに「RobotMotion.yaml」というファイルで保存します。"
#~ msgstr ""

#~ msgid ""
#~ "これにより、「model/robot/RTC/」ディレクトリに「RobotTorqueControllerRTC.so」というファイルが作成されるはずです。"
#~ msgstr ""

#~ msgid ""
#~ "そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRC-"
#~ "1のモデルファイルを読み込みます。ファイル名はモデルファイルを展開したディレクトリのmain.wrlです。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRC-"
#~ "1用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「サンプルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid "ここではJVRCモデルにRTコンポーネントのコントローラを接続し、ロボットの関節角度を取得できるようにします。"
#~ msgstr ""

#~ msgid ""
#~ "まずアイテムビューで「JVRC」を選択します。 "
#~ "次に、「メニュー」の「ファイル」「新規」より「BodyRTC」を選択し「BodyRTC」という名前で追加します。"
#~ msgstr ""

#~ msgid ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で15秒間の間立ったままの状態になったはずです。 "
#~ "これは、JVRCの制御を行うためのモーションデータが15秒ぶんしか用意していないためです。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRCモデルファイル用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「samples/cnoid/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「samples/cnoid/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample1.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」からJVRCモデルファイル用のプロジェクトファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample1.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/samples/sample2.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "「メニュー」の「プロジェクトの読み込み」から JVRC モデルファイル用のプロジェク "
#~ "トファイルを読み込みます。プロジェクトファイル名は「モデルファイルのインス "
#~ "トール」でダウンロードしたリポジトリの「model/robot/samples/sample2.cnoid」です。"
#~ msgstr ""

#~ msgid ""
#~ "このサンプルのプロジェクトファイルは「モデルファイルのインストール」でダウン "
#~ "ロードしたリポジトリの「model/robot/samples/sample3.cnoid」に保存されています。"
#~ msgstr ""

#~ msgid ""
#~ "onActivated() のときの処理に注目しましょう。この関数はRTCが有効化された際に一度だけ呼ばれます。 "
#~ "ここで、Choreonoidの共有ディレクトリからRobotPattern.yamlを読み出しています。 "
#~ "これは制御の際の基準となるフレームファイルです。 `motion.loadStandardYAMLformat()` "
#~ "によりモーションデータに変換します。 onActivated()では初期値の設定も行っています。"
#~ msgstr ""

#~ msgid "シミュレーションの設定"
#~ msgstr ""

#~ msgid ""
#~ "Choreonoidにおけるシミュレーションの初期実行間隔は10msとあまりに粗く、今回のロボットの制御には向いていません。 "
#~ "シミュレーションの実行間隔を細かくすることで、 この作業はモーションを生成する前に行う必要があります。"
#~ msgstr ""

#~ msgid "pgain, dgain の調整について"
#~ msgstr ""

#~ msgid ""
#~ "ポーズを決めてモーションを生成し、コントローラで読み込んでシミュレーションさせたとしても、うまくロボットは制御できません。 "
#~ "制御がないとロボットは崩れてしまい、制御をやりすぎるとロボットはどこかへ飛んでいってしまいます。 そのため、各関節のpgain, "
#~ "dgainを細かく調整する必要があります。"
#~ msgstr ""

#~ msgid ""
#~ "制御の簡単な方針として、シミュレーション中にトルクや dq の値を表示させ、明らかに変化が激しくなっている関節角度のpgainを増加させます。 "
#~ "またはシミュレーションの描画中に不安定になっている関節の関節番号を確認し、その関節角度のpgainを増加させます。 dgain "
#~ "は少し値を変えただけでロボットが飛んでいくほど影響が大きいので、値の調整は難しいです。"
#~ msgstr ""

#~ msgid ""
#~ "そのまま「メニュー」の「ファイル」「読み込み」より「OpenHRPモデルファイル」を選択し、JVRCモデルファイルを読み込みます。ファイル名は「モデルファイルのインストール」でダウンロードしたリポジトリの「model/robot/robot.yaml」です。"
#~ msgstr ""

#~ msgid ""
#~ "モデルを読み込んだだけではロボットは表示されません。 「アイテム」と書かれたリストのJVRCにチェックを入れてください。 "
#~ "すると、以下のようにロボットが表示されるはずです。"
#~ msgstr ""

#~ msgid "これは全く制御をしていないためです。 これからロボットを制御するプログラムを記述し、ロボットが崩れ落ちないようにしていきます。"
#~ msgstr ""

#~ msgid "本ドキュメントではサンプルシミュレーションの実行方法について解説します。"
#~ msgstr ""

#~ msgid "本ドキュメントではJVRCモデルファイルを用いた基本的なシミュレーションの実行方法について解説します。"
#~ msgstr ""

#~ msgid ""
#~ "シミュレーションツールバーの「シミュレーション開始ボタン」を押します。 "
#~ "シミュレーションを実行すると今度はなかなかロボットが崩れ落ちず、シミュレーション時間で4秒間の間立ったままの状態になったはずです。"
#~ msgstr ""
